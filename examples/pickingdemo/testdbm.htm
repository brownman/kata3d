<html><head> 
 
 
<title>GLGE</title> 
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
 
 
<script type="text/javascript" src="../../external/sylvester.src.js"></script> 
<script type="text/javascript" src="../../external/glutils.js"></script> 
<script type="text/javascript" src="../../glge.js"></script> 
<script type="text/javascript" src="../../glge_input.js"></script> 
<style>
body{background-color: #000;color: #fff;font-family:arial}
</style>
</head><body>

<div>
<div style="width:900px;margin:auto;position:relative" id="container">
<canvas id="canvas" width="900" 
height="500"></canvas>
<img src="images/glgelogo.png" alt="GLGElogo" style="position:absolute;top: 450px; left: 750px;" />
<div id="framerate" style="position:absolute; left: 750px; top: 20px; background-color: #000; opacity: 0.5;height: 30px; width: 130px; border-radius: 5px;	-moz-border-radius5px;-webkit-border-radius:5px;border: 1px solid #fff;">
<div id="debug" style="padding: 5px"></div>
</div>
<div style="padding: 5px;position:absolute; left: 20px; top: 370px; background-color: #000; opacity: 0.5;height: 100px; width: 400px; border-radius: 5px;	-moz-border-radius5px;-webkit-border-radius:5px;border: 1px solid #fff;">
<h2 style="margin:0;padding:0;padding-bottom: 5px;font-size: 20px">Picking Demo</h2>
<p style="margin:0;padding:0;padding-bottom: 5px;">Hover the mouse over objects to highlight</p>
<p style="margin:0;padding:0;padding-bottom: 5px;">Use the mouse and WASD Keys to move the camera</p>
</div>
</div>

</div>



<div id="debug2"></div>
<script type="text/javascript">
var spotlight1
var doc = new GLGE.Document("level.xml");
doc.onLoad=function(){

spotlight1=doc.getElement("mainlight");
var crate=doc.getElement("crate");
var selected_mat=doc.getElement("purple");
var hover_mat=doc.getElement("cyan");
//create the renderer
var gameRenderer=new GLGE.Renderer(document.getElementById('canvas'));
gameScene=doc.getElement("mainscene");
gameRenderer.setScene(gameScene);


var mouse=new GLGE.MouseInput(document.getElementById('canvas'));
var keys=new GLGE.KeyInput();
var selected_obj;
var mouseovercanvas;

function pdebug(s, l){
	if (l === undefined) {
		document.getElementById("dbg").innerHTML += s + "<br>"
	}
	else {
		document.getElementById("dbg" + l).innerHTML = s + "<br>"	
	}
}

function pdebug_clear() {
	document.getElementById("dbg").innerHTML = ""
}

function inspectObject(o) {
	pdebug_clear()
	pdebug("inspectObject:" + o)
	for (i in o) {
		pdebug("  " + i + "  :  " + o[i])
	}
}

selected_obj=null
hover_obj=null
old_leftbutton=false

///	make this a method!
function set_status(obj, status){
    if (obj && (status != obj.status)) {
        if (status == null) {
            obj.setMaterial(obj.original_material)
        }
        else {
            if (obj.status == null) {
                obj.original_material = obj.getMaterial()
            }
            obj.setMaterial(eval(status + "_mat"))
        }
		obj.status = status
    }
}

function mouselook(){
    if (mouseovercanvas) {
        var mousepos = mouse.getMousePosition();
        var leftbutton = mouse.isButtonDown(0)
        pdebug("mouse x: " + mousepos.x + " y: " + mousepos.y + " left button: " + leftbutton, 0)
        mousepos.x = mousepos.x - document.getElementById("container").offsetLeft;
        mousepos.y = mousepos.y - document.getElementById("container").offsetTop;
        
        if (mousepos.x && mousepos.y) {
            obj = gameScene.pick(mousepos.x, mousepos.y);
        }
        if (leftbutton) {
            if (old_leftbutton == false) {
                if (obj && obj != selected_obj) {
                    set_status(selected_obj, null)
                    if (obj.getId() != "wallobject") {
                        set_status(obj, "selected")
                    }
                    selected_obj = obj;
                    pdebug("selected: " + selected_obj.id, 2)
                }
                start_mouse_x = parseInt(mousepos.x)
                start_selected_x = parseFloat(selected_obj.getLocX())
                //				inspectObject(selected_obj)
            }            
            if (selected_obj.getId() != "wallobject") {
                move_x = (parseInt(mousepos.x) - start_mouse_x) * -0.04
                new_x = start_selected_x + move_x
                pdebug("dragging: " + selected_obj.id + " from: " + start_selected_x + " to: " + new_x, 4)
                selected_obj.setLocX(new_x)
            }
        }
        else {            
            if (obj && obj != hover_obj) {
				if (hover_obj != selected_obj) set_status(hover_obj, null)
                hover_obj = obj;
                if (obj.getId() != "wallobject" && obj != selected_obj) {
                    set_status(obj, "hover")
                }
                pdebug("hovering over: " + hover_obj.id, 3)
            }
        }
        old_leftbutton = leftbutton
    }
}

function checkkeys(){
	var camera=gameScene.camera;
	camerapos=camera.getPosition();
	camerarot=camera.getRotation();
	var trans=camera.getRotMatrix().inverse().x($V([0,0,-1])).flatten();
	var mag=Math.pow(Math.pow(trans[0],2)+Math.pow(trans[1],2),0.5);
	trans[0]=trans[0]/mag;
	trans[1]=trans[1]/mag;
	var yinc=0;
	var xinc=0;

	if(keys.isKeyPressed(GLGE.KI_M)) {spotlight1.setRotX(parseFloat(spotlight1.getRotX())+parseFloat(0.01));}
	if(keys.isKeyPressed(GLGE.KI_N)) {spotlight1.setRotX(parseFloat(spotlight1.getRotX())-parseFloat(0.01));}
	if(keys.isKeyPressed(GLGE.KI_W)) {yinc=yinc+parseFloat(trans[1]);xinc=xinc+parseFloat(trans[0]);}
	if(keys.isKeyPressed(GLGE.KI_UP_ARROW)) {yinc=yinc+parseFloat(trans[1]);xinc=xinc+parseFloat(trans[0]);}
	if(keys.isKeyPressed(GLGE.KI_S)) {yinc=yinc-parseFloat(trans[1]);xinc=xinc-parseFloat(trans[0]);}
	if(keys.isKeyPressed(GLGE.KI_DOWN_ARROW)) {yinc=yinc-parseFloat(trans[1]);xinc=xinc-parseFloat(trans[0]);}
	if(keys.isKeyPressed(GLGE.KI_A)) {yinc=yinc+parseFloat(trans[0]);xinc=xinc-parseFloat(trans[1]);}
	if(keys.isKeyPressed(GLGE.KI_D)) {yinc=yinc-parseFloat(trans[0]);xinc=xinc+parseFloat(trans[1]);}
	if(keys.isKeyPressed(GLGE.KI_U)) {inc -= 0.025}
	if(keys.isKeyPressed(GLGE.KI_J)) {inc += 0.025}
	if(keys.isKeyPressed(GLGE.KI_LEFT_ARROW)) {
		camera.setRotY(camerarot.y+0.025);
	}
	if(keys.isKeyPressed(GLGE.KI_RIGHT_ARROW)) {
		camera.setRotY(camerarot.y-0.025);
	}
	pdebug("levelmap: " + levelmap.getHeightAt(camerapos.x + xinc, camerapos.y + yinc),5)
	if(levelmap.getHeightAt(camerapos.x+xinc,camerapos.y)>30) xinc=0;
	if(levelmap.getHeightAt(camerapos.x,camerapos.y+yinc)>30) yinc=0;
    
    if (levelmap.getHeightAt(camerapos.x + xinc, camerapos.y + yinc) > 30) {
        yinc = 0;
        xinc = 0;
    }
    else {
        camera.setLocZ(levelmap.getHeightAt(camerapos.x + xinc, camerapos.y + yinc) + 8);
    }
	if(xinc!=0 || yinc!=0){
		camera.setLocY(camerapos.y+yinc);camera.setLocX(camerapos.x+xinc);
	}
	camera.setRotX(1.56-trans[1]*inc);
	camera.setRotZ(-trans[0]*inc);
}


levelmap=new GLGE.HeightMap("images/map.png",120,120,-50,50,-50,50,0,50);


var lasttime=0;
var frameratebuffer=60;
start=parseInt(new Date().getTime());
var cnt=0;
function render(){
    var now=parseInt(new Date().getTime());
    cnt=(cnt+1)%10;
    if(cnt==0){
	    frameratebuffer=Math.round(((frameratebuffer*9)+1000/(now-lasttime))/10);
	    document.getElementById("debug").innerHTML="Frame Rate:"+frameratebuffer;
    }
    lasttime=now;
    mouselook();
    checkkeys();
    gameRenderer.render();
}
setInterval(render,15);
var inc=0.2;
document.getElementById("canvas").onmousedown=function(e){gameScene.pick(e.clientX-this.parentNode.offsetLeft,e.clientY-this.parentNode.offsetTop); }
document.getElementById("canvas").onmouseover=function(e){mouseovercanvas=true;}
document.getElementById("canvas").onmousemove=function(e){mouseovercanvas=true;}
document.getElementById("canvas").onmouseout=function(e){mouseovercanvas=false;}
}
</script>

<div id="dbg0"></div>
<div id="dbg1"></div>
<div id="dbg2"></div>
<div id="dbg3"></div>
<div id="dbg4"></div>
<div id="dbg5"></div>
<div id="dbg6"></div>
<div id="dbg"></div>
</body></html>